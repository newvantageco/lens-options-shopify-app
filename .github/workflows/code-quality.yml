name: Code Quality & Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Run ESLint
        run: |
          echo "## ESLint Results" >> $GITHUB_STEP_SUMMARY
          npm run lint 2>&1 >> $GITHUB_STEP_SUMMARY || echo "ESLint issues found - see logs" >> $GITHUB_STEP_SUMMARY
          cd frontend && npm run lint 2>&1 >> $GITHUB_STEP_SUMMARY || echo "Frontend ESLint issues found - see logs" >> $GITHUB_STEP_SUMMARY

      - name: Run Prettier
        run: |
          echo "## Prettier Format Check" >> $GITHUB_STEP_SUMMARY
          npm run format:check 2>&1 >> $GITHUB_STEP_SUMMARY || echo "Formatting issues found" >> $GITHUB_STEP_SUMMARY
          cd frontend && npm run format:check 2>&1 >> $GITHUB_STEP_SUMMARY || echo "Frontend formatting issues found" >> $GITHUB_STEP_SUMMARY

      - name: TypeScript Check
        run: |
          echo "## TypeScript Check" >> $GITHUB_STEP_SUMMARY
          cd frontend && npm run type-check 2>&1 >> $GITHUB_STEP_SUMMARY || echo "TypeScript errors found" >> $GITHUB_STEP_SUMMARY

      - name: Upload ESLint results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: eslint-results
          path: |
            eslint-results.json
            frontend/eslint-results.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-suite: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          if [ "${{ matrix.test-suite }}" = "frontend" ]; then
            cd frontend && npm ci
          fi

      - name: Run backend tests
        if: matrix.test-suite == 'backend'
        run: |
          npm test -- --coverage --watchAll=false
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/lens-options-test
          JWT_SECRET: test-secret-key-for-ci
          ENCRYPTION_KEY: test-encryption-key-32-chars

      - name: Run frontend tests
        if: matrix.test-suite == 'frontend'
        run: |
          cd frontend && npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.test-suite == 'backend' && './coverage/lcov.info' || './frontend/coverage/lcov.info' }}
          flags: ${{ matrix.test-suite }}
          name: ${{ matrix.test-suite }}-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: |
          npm run test:integration
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/lens-options-test
          JWT_SECRET: test-secret-key-for-ci
          ENCRYPTION_KEY: test-encryption-key-32-chars

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Build application
        run: |
          cd frontend && npm run build
          npm run build

      - name: Start application
        run: |
          npm start &
          sleep 10

      - name: Run E2E tests
        run: |
          npm run test:e2e
        env:
          BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: e2e-results/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start test server
        run: |
          node test-server.js &
          sleep 10

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Run accessibility tests
        run: |
          cd frontend && npm run test:a11y

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-results
          path: frontend/a11y-results/

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, e2e-tests, performance-tests, accessibility-tests]
    if: always()
    
    steps:
      - name: Generate test summary
        run: |
          echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility Tests | ${{ needs.accessibility-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.code-quality.result }}" != "success" ] || [ "${{ needs.unit-tests.result }}" != "success" ] || [ "${{ needs.integration-tests.result }}" != "success" ]; then
            echo "⚠️ **Some tests failed. Please review the logs and fix the issues.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "🎉 **All tests passed! The code is ready for deployment.**" >> $GITHUB_STEP_SUMMARY
          fi
